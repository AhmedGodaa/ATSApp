/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.CreateUserRequest;
import org.openapitools.model.MessageResponseRefreshTokenResponse;
import org.openapitools.model.MessageResponseUserSignInResponse;
import org.openapitools.model.ResetPasswordRequest;
import org.openapitools.model.StringMessageResponse;
import org.openapitools.model.UserSignInRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-08-29T20:04:34.785275100+03:00[Africa/Cairo]", comments = "Generator version: 7.8.0")
@Validated
@Tag(name = "authentication-controller", description = "the authentication-controller API")
public interface AuthApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /auth/refresh-token
     *
     * @param refreshToken  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "refreshAccessToken",
        tags = { "authentication-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = MessageResponseRefreshTokenResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/auth/refresh-token",
        produces = { "*/*" }
    )
    
    default ResponseEntity<MessageResponseRefreshTokenResponse> refreshAccessToken(
        @NotNull @Parameter(name = "refresh-token", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "refresh-token", required = true) String refreshToken
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"data\" : { \"newRefreshToken\" : \"newRefreshToken\", \"newJwt\" : \"newJwt\" }, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /auth/password/request-reset
     *
     * @param email  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "requestPasswordReset",
        tags = { "password-reset-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = StringMessageResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/auth/password/request-reset",
        produces = { "*/*" }
    )
    
    default ResponseEntity<StringMessageResponse> requestPasswordReset(
        @NotNull @Parameter(name = "email", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "email", required = true) String email
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /auth/password/reset
     *
     * @param resetPasswordRequest  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "resetPassword",
        tags = { "password-reset-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = StringMessageResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/auth/password/reset",
        produces = { "*/*" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<StringMessageResponse> resetPassword(
        @Parameter(name = "ResetPasswordRequest", description = "", required = true) @Valid @RequestBody ResetPasswordRequest resetPasswordRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /auth/signin
     *
     * @param userSignInRequest  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "signIn",
        tags = { "authentication-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = MessageResponseUserSignInResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/auth/signin",
        produces = { "*/*" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<MessageResponseUserSignInResponse> signIn(
        @Parameter(name = "UserSignInRequest", description = "", required = true) @Valid @RequestBody UserSignInRequest userSignInRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"data\" : { \"fullName\" : \"fullName\", \"id\" : 0, \"email\" : \"email\", \"token\" : \"token\", \"refreshToken\" : \"refreshToken\" }, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /auth/signup
     *
     * @param createUserRequest  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "signUp",
        tags = { "authentication-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = StringMessageResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/auth/signup",
        produces = { "*/*" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<StringMessageResponse> signUp(
        @Parameter(name = "CreateUserRequest", description = "", required = true) @Valid @RequestBody CreateUserRequest createUserRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /auth/verify-email
     *
     * @param token  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "verifyEmail",
        tags = { "email-verification-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/auth/verify-email",
        produces = { "*/*" }
    )
    
    default ResponseEntity<String> verifyEmail(
        @NotNull @Parameter(name = "token", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "token", required = true) String token
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
